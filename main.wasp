app todoWasp {
  wasp: {
    version: "^0.10.6"
  },
  title: "todo-wasp",
  auth: {
    // Expects entity User to have (username:String) and (password:String) fields.
    userEntity: User,
    methods: {
      // We also support Google and GitHub, with more on the way!
      usernameAndPassword: {}
    },
    // We'll see how this is used a bit later
    onAuthFailedRedirectTo: "/login",
  },
  dependencies: [
    ("react-clock", "3.0.0")
  ]
}

// /********* Router **********/
// MainPage
route RootRoute { path: "/", to: MainPage }
page MainPage {
  authRequired: true,
  component: import Main from "@client/Main.jsx"
}
// SignupPage
route SignupRoute { path: "/signup", to: SignupPage }
page SignupPage {
  component: import Signup from "@client/Signup"
}
// LoginPage
route LoginRoute { path: "/login", to: LoginPage }
page LoginPage {
  component: import Login from "@client/Login"
}

// /********* DataBase **********/
// Task
entity Task {=psl
    id          Int     @id @default(autoincrement())
    description String
    isDone      Boolean @default(false)
    user        User?    @relation(fields: [userId], references: [id])
    userId      Int?
psl=}
// User
entity User {=psl
    id          Int     @id @default(autoincrement())
    username    String  @unique
    password    String
    tasks       Task[]
psl=}

// /********* API **********/
query getTasks {
  fn: import { getTasks } from "@server/queries.js",
  entities: [Task]
}

action createTask {
  fn: import { createTask } from "@server/actions.js",
  entities: [Task]
}

action updateTask {
  fn: import { updateTask } from "@server/actions.js",
  entities: [Task]
}






